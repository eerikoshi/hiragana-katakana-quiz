import React, { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

const hiraganaData = {
  A: "„ÅÇ", I: "„ÅÑ", U: "„ÅÜ", E: "„Åà", O: "„Åä",
  Ka: "„Åã", Ki: "„Åç", Ku: "„Åè", Ke: "„Åë", Ko: "„Åì",
  Sa: "„Åï", Shi: "„Åó", Su: "„Åô", Se: "„Åõ", So: "„Åù",
  Ta: "„Åü", Chi: "„Å°", Tsu: "„Å§", Te: "„Å¶", To: "„Å®",
  Na: "„Å™", Ni: "„Å´", Nu: "„Å¨", Ne: "„Å≠", No: "„ÅÆ",
  Ha: "„ÅØ", Hi: "„Å≤", Fu: "„Åµ", He: "„Å∏", Ho: "„Åª",
  Ma: "„Åæ", Mi: "„Åø", Mu: "„ÇÄ", Me: "„ÇÅ", Mo: "„ÇÇ",
  Ya: "„ÇÑ", Yu: "„ÇÜ", Yo: "„Çà",
  Ra: "„Çâ", Ri: "„Çä", Ru: "„Çã", Re: "„Çå", Ro: "„Çç",
  Wa: "„Çè", Wo: "„Çí", N: "„Çì",
  Kya: "„Åç„ÇÉ", Kyu: "„Åç„ÇÖ", Kyo: "„Åç„Çá",
  Sha: "„Åó„ÇÉ", Shu: "„Åó„ÇÖ", Sho: "„Åó„Çá",
  Cha: "„Å°„ÇÉ", Chu: "„Å°„ÇÖ", Cho: "„Å°„Çá",
  Pya: "„Å¥„ÇÉ", Pyu: "„Å¥„ÇÖ", Pyo: "„Å¥„Çá",
  Gya: "„Åé„ÇÉ", Gyu: "„Åé„ÇÖ", Gyo: "„Åé„Çá",
  Bya: "„Å≥„ÇÉ", Byu: "„Å≥„ÇÖ", Byo: "„Å≥„Çá"
};

const katakanaData = {
  A: "„Ç¢", I: "„Ç§", U: "„Ç¶", E: "„Ç®", O: "„Ç™",
  Ka: "„Ç´", Ki: "„Ç≠", Ku: "„ÇØ", Ke: "„Ç±", Ko: "„Ç≥",
  Sa: "„Çµ", Shi: "„Ç∑", Su: "„Çπ", Se: "„Çª", So: "„ÇΩ",
  Ta: "„Çø", Chi: "„ÉÅ", Tsu: "„ÉÑ", Te: "„ÉÜ", To: "„Éà",
  Na: "„Éä", Ni: "„Éã", Nu: "„Éå", Ne: "„Éç", No: "„Éé",
  Ha: "„Éè", Hi: "„Éí", Fu: "„Éï", He: "„Éò", Ho: "„Éõ",
  Ma: "„Éû", Mi: "„Éü", Mu: "„É†", Me: "„É°", Mo: "„É¢",
  Ya: "„É§", Yu: "„É¶", Yo: "„É®",
  Ra: "„É©", Ri: "„É™", Ru: "„É´", Re: "„É¨", Ro: "„É≠",
  Wa: "„ÉØ", Wo: "„É≤", N: "„É≥",
  Kya: "„Ç≠„É£", Kyu: "„Ç≠„É•", Kyo: "„Ç≠„Éß",
  Sha: "„Ç∑„É£", Shu: "„Ç∑„É•", Sho: "„Ç∑„Éß",
  Cha: "„ÉÅ„É£", Chu: "„ÉÅ„É•", Cho: "„ÉÅ„Éß",
  Pya: "„Éî„É£", Pyu: "„Éî„É•", Pyo: "„Éî„Éß",
  Gya: "„ÇÆ„É£", Gyu: "„ÇÆ„É•", Gyo: "„ÇÆ„Éß",
  Bya: "„Éì„É£", Byu: "„Éì„É•", Byo: "„Éì„Éß"
};

const kotobaList = [
  { hiragana: "„Å≤„Å®", kanji: "‰∫∫", arti: "Orang" },
  { hiragana: "„ÅÑ„Åà", kanji: "ÂÆ∂", arti: "Rumah" },
  { hiragana: "„Åè„Çã„Åæ", kanji: "Ëªä", arti: "Mobil" },
  { hiragana: "„Åå„Å£„Åì„ÅÜ", kanji: "Â≠¶Ê†°", arti: "Sekolah" },
  { hiragana: "„Åõ„Çì„Åõ„ÅÑ", kanji: "ÂÖàÁîü", arti: "Guru" },
  { hiragana: "„Åå„Åè„Åõ„ÅÑ", kanji: "Â≠¶Áîü", arti: "Murid / Mahasiswa" },
  { hiragana: "„Å®„ÇÇ„Å†„Å°", kanji: "ÂèãÈÅî", arti: "Teman" },
  { hiragana: "„Åª„Çì", kanji: "Êú¨", arti: "Buku" },
  { hiragana: "„Åà„Åç", kanji: "ÈßÖ", arti: "Stasiun" },
  { hiragana: "„Åä„Åã„Å≠", kanji: "„ÅäÈáë", arti: "Uang" },
  // ... bisa lanjutkan sesuai daftar lengkap Anda
];

function shuffle(array) {
  return array.sort(() => Math.random() - 0.5);
}

export default function KanaKotobaQuiz() {
  const [mode, setMode] = useState("hiragana");
  const [usedKeys, setUsedKeys] = useState([]);
  const [question, setQuestion] = useState("");
  const [options, setOptions] = useState([]);
  const [feedback, setFeedback] = useState("");
  const [kotoba, setKotoba] = useState(null);
  const [kotobaOptions, setKotobaOptions] = useState([]);
  const [kotobaResult, setKotobaResult] = useState("");

  const data = mode === "hiragana" ? hiraganaData : mode === "katakana" ? katakanaData : null;
  const allKeys = data ? Object.keys(data) : [];

  useEffect(() => {
    if (mode === "kotoba") generateKotoba();
    else {
      setUsedKeys([]);
      generateKana();
    }
  }, [mode]);

  const generateKana = () => {
    const availableKeys = allKeys.filter(k => !usedKeys.includes(k));
    if (availableKeys.length === 0) {
      setQuestion("");
      return;
    }
    const randKey = availableKeys[Math.floor(Math.random() * availableKeys.length)];
    const correctAnswer = randKey;
    const optionsSet = new Set([correctAnswer]);
    while (optionsSet.size < 4) {
      const opt = allKeys[Math.floor(Math.random() * allKeys.length)];
      optionsSet.add(opt);
    }
    setQuestion(data[randKey]);
    setOptions(shuffle(Array.from(optionsSet)));
  };

  const handleKanaAnswer = (answer) => {
    const correctRomaji = Object.keys(data).find(key => data[key] === question);
    if (answer === correctRomaji) {
      setFeedback("‚úÖ Benar!");
      setUsedKeys([...usedKeys, correctRomaji]);
      setTimeout(() => {
        setFeedback("");
        generateKana();
      }, 1000);
    } else {
      setFeedback(`‚ùå Salah. Jawaban: ${correctRomaji}`);
      setTimeout(() => setFeedback(""), 1500);
    }
  };

  const generateKotoba = () => {
    const shuffled = shuffle([...kotobaList]);
    const q = shuffled[0];
    const choices = shuffle([
      q.arti,
      shuffled[1].arti,
      shuffled[2].arti,
      shuffled[3].arti
    ]);
    setKotoba(q);
    setKotobaOptions(choices);
    setKotobaResult("");
  };

  const checkKotobaAnswer = (selected) => {
    if (selected === kotoba.arti) {
      setKotobaResult("‚úÖ Benar!");
    } else {
      setKotobaResult(`‚ùå Salah. Jawaban benar: ${kotoba.arti}`);
    }
    setTimeout(generateKotoba, 1500);
  };

  return (
    <div className="p-6 text-center font-sans">
      <h1 className="text-2xl font-bold text-blue-600 mb-4">
        Tebak {mode === "hiragana" ? "Hiragana" : mode === "katakana" ? "Katakana" : "Kotoba"}
      </h1>
      <div className="mb-6 space-x-2">
        <Button onClick={() => setMode("hiragana")} variant={mode === "hiragana" ? "default" : "outline"}>Hiragana</Button>
        <Button onClick={() => setMode("katakana")} variant={mode === "katakana" ? "default" : "outline"}>Katakana</Button>
        <Button onClick={() => setMode("kotoba")} variant={mode === "kotoba" ? "default" : "outline"}>Tebak Kotoba</Button>
      </div>

      {mode !== "kotoba" && question && (
        <>
          <div className="text-6xl text-gray-800 mb-4">{question}</div>
          <div className="grid grid-cols-2 gap-4 max-w-md mx-auto">
            {options.map((opt, idx) => (
              <Button key={idx} onClick={() => handleKanaAnswer(opt)}>{opt}</Button>
            ))}
          </div>
          <div className="mt-4 text-lg">{feedback}</div>
        </>
      )}

      {mode === "kotoba" && kotoba && (
        <>
          <Card className="w-full max-w-md mb-4 mx-auto">
            <CardContent className="text-center p-6 text-4xl">
              {kotoba.hiragana}Ôºà{kotoba.kanji}Ôºâ
            </CardContent>
          </Card>
          <div className="grid grid-cols-2 gap-4 max-w-md mx-auto">
            {kotobaOptions.map((option, index) => (
              <Button key={index} onClick={() => checkKotobaAnswer(option)}>
                {option}
              </Button>
            ))}
          </div>
          <div className="mt-4 text-lg font-semibold">{kotobaResult}</div>
        </>
      )}

      {!question && mode !== "kotoba" && (
        <div className="text-green-600 text-xl mt-6">üéâ Semua pertanyaan selesai!</div>
      )}
    </div>
  );
}
